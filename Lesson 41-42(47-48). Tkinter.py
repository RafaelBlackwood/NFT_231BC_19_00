# Tkinter
'''
Tkinter - это стандартная библиотека Python для создания
 графических пользовательских интерфейсов (GUI).
 Она предоставляет возможность создавать окна,
 кнопки, текстовые поля, меню, диалоговые окна и другие элементы интерфейса.


Tkinter базируется на библиотеке Tcl/Tk, которая написана на
на языке программирования Tcl и является кросс-платформенной,
что означает, что приложения, созданные с помощью Tkinter,
могут работать на разных операционных системах, таких как Windows, Linux и Mac.
'''

# Отличия консольных и GUI приложений.
'''
Консольные приложения (CLI - Command Line Interface) и приложения с 
графическим интерфейсом (GUI)  представляют собой два разных 
подхода к созданию программного обеспечения. 

Основные отличия между ними:

Взаимодействие с пользователем:
В консольных приложениях пользователь вводит команды в командной строке,
то время как в GUI приложениях пользователь может использовать
мышь и клавиатуру, чтобы взаимодействовать с элементами интерфейса.

Визуальный интерфейс:
GUI приложения имеют графический интерфейс, что позволяет 
пользователям легко управлять приложением с помощью кнопок,
меню и других элементов интерфейса.
Консольные приложения, напротив, не имеют графического
интерфейса и представляют собой текстовую командную строку.

Сложность:
GUI приложения могут быть более сложными в создании, поскольку 
они требуют создания графического интерфейса и управления 
элементами интерфейса. Консольные приложения могут быть более 
простыми в создании, так как они просто выполняют задачи на
основе команд, введенных пользователем в командной строке.


Переносимость: 
Консольные приложения могут быть более переносимыми, поскольку
они не зависят от графического интерфейса операционной системы 
и могут быть запущены на разных платформах. 
GUI приложения могут быть менее переносимыми, поскольку графический
 интерфейс может быть зависимым от операционной системы.

Возможности: 
GUI приложения могут обеспечивать более широкий спектр функций и 
возможностей, так как они могут использовать графический интерфейс 
для предоставления дополнительных функций и удобств. 
Консольные приложения, напротив, могут быть более ограниченными в своих 
возможностях, так как они ограничены текстовой командной строкой.

'''

# Создание окна
'''
from tkinter import *

root = Tk()  # создаем корневой объект - окно

root.title("First application")  # устанавливаем заголовок окна
root.iconbitmap(default="file.ico") # Установка иконки.  параметр default в метод iconbitmap передается путь к иконки

root.geometry("350x400")  # устанавливаем размеры окна
root.geometry('500x500+500+200') # Устанавливаем размеры окна и задаем его координаты

root.config(width=300, height=500,bg='black') #используется для изменения настроек виджета, таких как ширина, высота, цвет фона и т.д.
# Mетод geometry() используется для установки размеров и положения окна на экране, а метод config() - 
# для изменения настроек виджета, таких как ширина, высота, цвет фона и т.д.

# root.minsize(300,300) минимальный такой будет
# root.maxsize(800,800) макс и не более

root.mainloop()

'''

# Создание и использование виджетов
'''
Виджет - это элемент пользовательского интерфейса в графическом 
оконном приложении. Виджеты обычно представляют собой кнопки, 
поля ввода, переключатели, флажки, таблицы, меню и многие другие 
элементы, которые пользователь может использовать для взаимодействия с приложением.

#Entry

#Label

#Button

#PhotoImage

#Checkbutton

#Listbox

#Massage Box

'''

#Задание
'''
при кликании на кнопку его фон должен поменять
цвет и остаться таким(background)
'''

from tkinter import *

root = Tk()
root.title('Test')
root.iconbitmap(default="icons\computer.ico")
root.geometry("500x500+400+300")
#root.resizable(True,False)
root.config(background='#C9C0BB')

counter = 0
'''def on_click():
    global counter
    counter+=1
    lbl['text']= f'Clicks: {counter}'
    if counter == 10:
        btn['state'] = DISABLED
        print(counter)
'''

def save():
    text = entr.get()
    lbl['text'] = f'Name: {text}'

if entr.get() == '':
    lbl_error = Label(text = 'Error')

def clear():
    entr.delete(first=0, last=END)

lbl = Label(root, text = 'Name:', font = "Abadi 14 ")
lbl.place(relx=0.1 ,rely=0.1)

btn = Button(root, text = 'Save data', command=save)
btn.place(relx= 0.1, rely=0.23)

btn_erase = Button(root, text = 'X', command=clear)
btn_erase.place(relx= 0.42, rely=0.16)

entr = Entry(root, width=25, borderwidth=6)
entr.place(relx= 0.08, rely = 0.16)

root.mainloop()